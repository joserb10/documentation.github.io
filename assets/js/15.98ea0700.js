(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{281:function(e,a,r){"use strict";r.r(a);var t=r(13),n=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"construccion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#construccion"}},[e._v("#")]),e._v(" Construcción")]),e._v(" "),a("h2",{attrs:{id:"lenguaje-y-librerias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lenguaje-y-librerias"}},[e._v("#")]),e._v(" Lenguaje y librerías")]),e._v(" "),a("p",[e._v("Para la construcción del frontend se hizo uso de JavaScript puro con el uso de librerías que incluye Jquery, Bootstrap, SweetAlert2, AnimateCss y Axios.")]),e._v(" "),a("h2",{attrs:{id:"funcionalidades"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#funcionalidades"}},[e._v("#")]),e._v(" Funcionalidades")]),e._v(" "),a("h3",{attrs:{id:"obtener-productos-por-categoria"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obtener-productos-por-categoria"}},[e._v("#")]),e._v(" Obtener productos por categoría")]),e._v(" "),a("h4",{attrs:{id:"obtener-todas-las-categorias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obtener-todas-las-categorias"}},[e._v("#")]),e._v(" Obtener todas las categorías")]),e._v(" "),a("p",[e._v("Para que el cliente pueda obtener los productos filtrados por categoría en primer lugar se debía obtener todas las categorías de la base de datos.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Obtener todas las categorías para mostrarlas al usuario*/\nfunction getCategories() {\n    //Formar la url completa para el request\n    let urlApi = urlbaseApiRest+apiCategories;\n    //Array para contener la data de categorias de la api\n    let categories = [];\n    //request api categories\n    axios.get(urlApi)\n        .then(function (response) {\n            //Manejar success\n            console.log(response);\n            //Almacenar data en array categories\n            categories = response.data;\n            //Validar que se hay obtenido data de la api para ejecutar la funcion de renderizado de categorias\n            if(categories.length > 0) {\n                //Renderizar categorias\n                renderCategories(categories);\n            }\n        })\n        .catch(function (error) {\n            //Manejar error\n            console.log(error);\n        })\n        .then(function () {\n            //Siempre se ejecuta\n            //Esconder spinner al terminar el request\n            $('.spinner').hide();\n        });\n}\n")])])]),a("h4",{attrs:{id:"renderizado-de-categorias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renderizado-de-categorias"}},[e._v("#")]),e._v(" Renderizado de categorías")]),e._v(" "),a("p",[e._v("Una vez obtenidas con Axios se debe renderizar en el html cada una de las categorías para lo cual se hizo la función renderCategories(categories) que recibe como parametro las categorias obtenidas de la api.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Renderizar las categorias en el html*/\nfunction renderCategories(categories) {\n    //Obtener elemento contenedor de las categorias\n    let containerCategories = $('#containerCategories');\n    \n    //Recorrer el array de categorias e insertar un boton por cada uno\n    for (let i = 0; i < categories.length; i++) {\n        const category = categories[i];\n        //Añadir boton al container con los datos de cada categoria\n        //Agregarle evento onclick para que ejecute la peticion obtener por categoria\n        containerCategories.append('<a onclick=getProductsByCategory('+category.id+') type=\"button\" class=\"btn btn-outline-light inline animate__animated animate__fadeInLeft\" href=\"#section-products\">'+category.name.toUpperCase()+'</a>');\n    }\n}\n")])])]),a("h4",{attrs:{id:"ejecucion-de-funciones-al-cargar-la-pagina"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ejecucion-de-funciones-al-cargar-la-pagina"}},[e._v("#")]),e._v(" Ejecución de funciones al cargar la página}")]),e._v(" "),a("p",[e._v("La función principal getCategories() que en su interior ejecuta renderCategories(categories) se debe ejecutar automaticamente al cargarse la página para lo cual se generó una función llamada startup() donde se encontraran todas las funciones que se deban ejecutar al cargar la página.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/* Ejecutar funciones getCategories y getAllProducts */\nfunction startup() {\n    getCategories();\n    getAllProducts();\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Ejecutar funcion para obtener categorias al cargar la pagina y todos los productos*/\nwindow.addEventListener('load', startup, false);\n")])])]),a("h4",{attrs:{id:"obtener-todos-los-productos-iniciales"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obtener-todos-los-productos-iniciales"}},[e._v("#")]),e._v(" Obtener todos los productos iniciales")]),e._v(" "),a("p",[e._v("Al cargarse la página se obtendrán todos los productos sin ningún filtro para que el usuario las pueda filtrar posteriormente.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function getAllProducts() {\n    //Formar la url completa para el request sin el parametro category para obtener todos los productos\n    let urlApi = urlbaseApiRest+apiProducts;\n    //request api products\n    axios.get(urlApi)\n        .then(function (response) {\n            //Manejar success\n            console.log(response);\n            //Almacenar data en array products\n            products = response.data.products;\n            //Setear totalPages\n            totalPages = response.data.totalPages;\n            //Renderizar productos\n            renderProducts(products);\n            //Renderizar totalPages con parametro adicional de query activo para añadirlo al request\n            let queryActive = '';\n            renderTotalPages(totalPages,queryActive);\n        })\n        .catch(function (error) {\n            //Manejar error\n            console.log(error);\n        })\n        .then(function () {\n            //Siempre se ejecuta\n        });\n}\n")])])]),a("h4",{attrs:{id:"renderizado-de-productos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renderizado-de-productos"}},[e._v("#")]),e._v(" Renderizado de productos")]),e._v(" "),a("p",[e._v("Una vez obtenidos todos los productos se deben renderizar en el html.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/*Generar cada elemento html por producto al ingresar a la pagina*/\nfunction renderProducts(products) {\n    //Obtener elemento contenedor de los productos y limpiarlo si es que tiene elementos\n    let containerProducts = $(\'#containerProducts\');\n    containerProducts.empty();\n\n    //Recorrer initialProducts para generar elementos\n    for (let i = 0; i < products.length; i++) {\n        const product = products[i];\n        //Imagen para productos que no poseen url_image\n        let no_image = "assets/no_image.jpg";\n        let url_image = product.url_image ? product.url_image : no_image;\n\n        //indicar si el producto tiene o no descuento\n        let hasDiscount = product.discount>0 ? true: false;\n        let priceWithDiscount = null;\n        let classHideBadges = "";\n        if (hasDiscount) {\n            priceWithDiscount = product.price * (100 - product.discount) / 100;\n        } else {\n            priceWithDiscount = product.price;\n            //Class para esconder badges\n            classHideBadges = "display_none";\n        }\n\n        //Añadir elemento con sus datos al contenedor de productos\n        containerProducts.append(`\n        <div class="col mb-5 animate__animated animate__bounceInUp">\n            <div class="card h-100 card-product">\n                \x3c!-- Oferta badge--\x3e\n                <div class="badge badge-custom bg-dark text-white position-absolute  `+ classHideBadges +`" style="top: 0.5rem; right: 0.5rem">Descuento de `+ product.discount +`%</div>\n                \x3c!-- Product image--\x3e\n                <img class="card-img-top product-img" src="`+ url_image +`"/>\n                \x3c!-- Product details--\x3e\n                <div class="card-body p-0">\n                    <div class="text-center">\n                        \x3c!-- Product name--\x3e\n                        <h5 class="fw-bolder p-2 bg-dark text-white">`+ product.name +`</h5>\n                        \x3c!-- Product reviews--\x3e\n                        <div class="d-flex justify-content-center small text-warning mb-2">\n                            <span class="badge badge-custom">`+ product.category.name.toUpperCase() +`</span>\n                        </div>\n                        \x3c!-- Product price--\x3e\n                        <span class="text-muted text-decoration-line-through  `+ classHideBadges +`">`+ product.price +`</span>\n                        $`+ priceWithDiscount +`\n                    </div>\n                </div>\n                \x3c!-- Product actions--\x3e\n                <div class="card-footer p-4 pt-0 border-top-0 bg-transparent">\n                    <div class="text-center"><a onclick="addProductToCart(`+ product.id +`)" class="btn btn-outline-dark mt-auto">Añadir a carrito</a></div>\n                </div>\n            </div>\n        </div>\n        `);        \n    }\n}\n')])])]),a("p",[e._v("De igual forma esta función se encontrará dentro de la función startup que se ejecuta al cargar la página.")]),e._v(" "),a("h4",{attrs:{id:"obtener-productos-por-categoria-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obtener-productos-por-categoria-2"}},[e._v("#")]),e._v(" Obtener productos por categoría")]),e._v(" "),a("p",[e._v("Una vez obtenidos los productos y categorías al cargar la página se puede obtener los productos filtrados por categoría presionando en el botón de la categoría que desee el usuario esto activará la siguiente función getProductsByCategory(category) al cual se le pasa el id de categoria del botón.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Obtener productos por categoria*/\nfunction getProductsByCategory(category) {\n    //Formar la url completa para el request con el parametro category\n    let query = '?category='+category;\n    let urlApi = urlbaseApiRest+apiProducts+query;\n    //request api products\n    axios.get(urlApi)\n        .then(function (response) {\n            //Manejar success\n            console.log(response);\n            //Almacenar data en array products\n            products = response.data.products;\n            //Setear totalPages\n            totalPages = response.data.totalPages;\n            //Renderizar productos\n            renderProducts(products);\n            //Renderizar totalPages con parametro adicional de query activo para añadirlo al request\n            let queryActive = query;\n            renderTotalPages(totalPages,queryActive);\n        })\n        .catch(function (error) {\n            //Manejar error\n            console.log(error);\n        })\n        .then(function () {\n            //Siempre se ejecuta\n        });\n}\n")])])]),a("p",[e._v("Se termina de ejecutar la funcíon y se vuelve a renderizar los productos eliminando los anteriores.")]),e._v(" "),a("h3",{attrs:{id:"obtener-productos-por-texto-de-busqueda"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obtener-productos-por-texto-de-busqueda"}},[e._v("#")]),e._v(" Obtener productos por texto de búsqueda")]),e._v(" "),a("p",[e._v("Esta función obtendrá los productos que posean el texto ingresado por el usuario y renderizará dichos productos en el html.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Obtener productos por texto busqueda*/\nfunction getProductsByText() {\n    //Obtener valor del input search\n    let textSearch = $('.input-search').val();\n    let query = '?text=';\n    //Validar si textSearch tiene texto\n    if (textSearch.trim().length>0) {\n        query += textSearch;\n    } else {\n        query = '';\n    }\n\n    //Formar la url completa para el request con el parametro text\n    let urlApi = urlbaseApiRest+apiProducts+query;\n\n    //request api products\n    axios.get(urlApi)\n        .then(function (response) {\n            //Manejar success\n            console.log(response);\n            //Almacenar data en array products\n            products = response.data.products;\n            //Setear totalPages\n            totalPages = response.data.totalPages;\n            //Renderizar productos\n            renderProducts(products);\n            //Renderizar totalPages con parametro adicional de query activo para añadirlo al request\n            let queryActive = query;\n            renderTotalPages(totalPages,queryActive);\n        })\n        .catch(function (error) {\n            //Manejar error\n            console.log(error);\n        })\n        .then(function () {\n            //Siempre se ejecuta\n        });\n}\n")])])]),a("h3",{attrs:{id:"obtener-productos-por-rango-de-precios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obtener-productos-por-rango-de-precios"}},[e._v("#")]),e._v(" Obtener productos por rango de precios")]),e._v(" "),a("p",[e._v("Esta función obtendrá los productos por que esten dentro de un rango de precios ingresados por el usuario.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Obtener productos por rango de precios*/\nfunction getProductsByPriceRange() {\n    //Obtener valor del input min-price\n    let min_price = $('#min_price').val();\n    //Obtener valor del input max-price\n    let max_price = $('#max_price').val();\n    let query;\n    //Validar si min_price tiene valor diferente a null\n    if (!min_price || !max_price || min_price<0 || max_price<0) {\n        Swal.fire({\n            position: 'top-end',\n            background: '#D20505',\n            customClass: 'swal-small',\n            title: 'Ingresar el precio mínimo y máximo mayor igual a cero!',\n            showConfirmButton: false,\n            timer: 2000\n        });\n        return\n    } \n    //Validar que min price sea menor o igual que max price \n    if (parseInt(max_price) < parseInt(min_price)) {\n        Swal.fire({\n            position: 'top-end',\n            background: '#D20505',\n            customClass: 'swal-small',\n            title: 'El precio mínimo debe ser menor al precio máximo!',\n            showConfirmButton: false,\n            timer: 2000\n        });\n        return\n    } \n\n    //Al pasar las validaciones\n    query = '?minPrice='+min_price+'&maxPrice='+max_price;\n\n    //Formar la url completa para el request con el parametro min y max price\n    let urlApi = urlbaseApiRest+apiProducts+query;\n\n    //request api products\n    axios.get(urlApi)\n        .then(function (response) {\n            //Manejar success\n            console.log(response);\n            //Almacenar data en array products\n            products = response.data.products;\n            //Validar que reques devuelva resultados\n            if(products.length>0) {\n                //Setear totalPages\n                totalPages = response.data.totalPages;\n                //Renderizar productos\n                renderProducts(products);\n                //Renderizar totalPages con parametro adicional de query activo para añadirlo al request\n                let queryActive = query;\n                renderTotalPages(totalPages,queryActive);\n            } else {\n                Swal.fire({\n                    position: 'top-end',\n                    background: '#C85318',\n                    customClass: 'swal-small',\n                    title: 'No existen productos en ese rango de precios!',\n                    showConfirmButton: false,\n                    timer: 2000\n                });\n            }\n            \n        })\n        .catch(function (error) {\n            //Manejar error\n            console.log(error);\n        })\n        .then(function () {\n            //Siempre se ejecuta\n        });\n}\n")])])]),a("h3",{attrs:{id:"agregar-productos-al-carrito-de-compras"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#agregar-productos-al-carrito-de-compras"}},[e._v("#")]),e._v(" Agregar productos al carrito de compras")]),e._v(" "),a("p",[e._v('Para poder colocar un producto en el carrito de compras el usuario debe dar click en el botón "Añadir a carrito" del producto que desee de tal forma que se ejecute la función addProductToCart(productId) recibiendo como parametro el id del producto a añadir.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Añadir producto a carrito*/\nfunction addProductToCart(productId) {\n    //Encontrar producto en array products\n    let product = products.find(p => p.id === productId);\n\n    //Validar que el producto no haya sido añadido previamente\n    let productInCart = cartProducts.find(p => p.id === productId);\n    if (productInCart) {\n        Swal.fire({\n            position: 'top-left',\n            background: '#FF5733',\n            customClass: 'swal-small-cart',\n            title: 'Este producto ya fue añadido al carrito!',\n            showConfirmButton: false,\n            timer: 1300\n        });\n        return;\n    }\n\n    //Seter el valor de cantidad de productos\n    product.cantidad = 1;\n    cartProducts.push(product);\n    //Alerta success\n    Swal.fire({\n        position: 'top-left',\n        background: '#4AD256',\n        customClass: 'swal-small-cart',\n        title: 'Este producto ya fue añadido al carrito!',\n        showConfirmButton: false,\n        timer: 1300\n    });\n\n    //Modicar contador de cart products\n    let counterCart = $('#counterCart');\n    counterCart.text(cartProducts.length);\n\n    //Renderizar productods en carrito de compras\n    renderCartProducts();\n    //Calcular total\n    calculateTotalPrice();\n}\n")])])]),a("h3",{attrs:{id:"renderizado-productos-en-el-carrito-de-compras"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renderizado-productos-en-el-carrito-de-compras"}},[e._v("#")]),e._v(" Renderizado productos en el carrito de compras")]),e._v(" "),a("p",[e._v("Cada vez que se añada un producto al carrito de compras se ejecutará la función renderCartProducts() que pintará todos los productos que se encuentren la variable global cartProducts array de productos.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//Renderizar producto en carrito de compras\nfunction renderCartProducts() {\n    //Obtener elemento contenedor de productos de carrito\n    let cartContainer = $(\'#table-cart-container\');\n    //Vaciar container\n    cartContainer.empty();\n    //Pintar productos\n    for (let i = 0; i < cartProducts.length; i++) {\n        const product = cartProducts[i];\n        cartContainer.append(`<tr>\n                            <td>\n                              <div class="d-flex align-items-center">\n                                <img\n                                    src="`+product.url_image+`"\n                                    alt=""\n                                    style="width: 60px; height: 60px"\n                                    class="rounded-circle"\n                                    />\n                              </div>\n                            </td>\n                            <td>\n                                <span class="badge bg-dark">`+product.name+`</span>\n                            </td>\n                            <td>\n                                <span class="badge bg-info">`+product.price+`.00</span>\n                            </td>\n                            <td>\n                                <span class="badge bg-info">`+product.discount+`%</span>\n                            </td>\n                            <td>\n                                <span class="badge bg-success">`+product.price * (100 - product.discount) / 100+`.00</span>\n                            </td>\n                            <td>\n                                <span class="badge bg-warning">`+product.category.name+`</span>\n                            </td>\n                            <td>\n                                <input min="1" onkeypress="calculateTotalProduct(event,`+product.id+`)" onchange="calculateTotalProduct(event,`+product.id+`)" class="my-2 form-control input-quantity" type="number" value="`+product.cantidad+`"/>\n                            </td>\n                            <td>\n                                <span class="badge bg-primary">`+ product.price *product.cantidad* (100 - product.discount) / 100+`.00</span>\n                            </td>\n                            <td>\n                              <button onclick="quitarCartProduct(`+i+`)" type="button" class="btn btn-link btn-sm rounded">\n                                <i class="fas fa-trash text-danger fw-bolder"></i>\n                              </button>\n                            </td>\n                          </tr>`);\n    }\n}\n')])])]),a("h3",{attrs:{id:"calcular-el-total-por-producto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#calcular-el-total-por-producto"}},[e._v("#")]),e._v(" Calcular el total por producto")]),e._v(" "),a("p",[e._v("Esta función se activará cada vez que el usuario despues de que haya añadido por lo menos un producto al carrito, le modifique la cantidad del producto añadido entonces se calcular el precio total de ese producto.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n/*Calcular el precio total por producto*/\nfunction calculateTotalProduct(event, productId) {\n    let cantidad_ingresada;\n    //Validar si el evento es onchange o onkeypress\n    if(event.key) {\n        //Validar si la tecla no es una letra\n        if(isNaN(event.key)) {\n            return;\n        }\n        //Setear cantidad a objeto producto de array cartProducts\n        cantidad_ingresada = parseInt(event.key);\n        cartProducts.find(p=> p.id ===productId).cantidad = cantidad_ingresada;\n        renderCartProducts();\n    } else {\n        //Setear cantidad a objeto producto de array cartProducts\n        cantidad_ingresada = event.target.valueAsNumber;\n        cartProducts.find(p=> p.id ===productId).cantidad = cantidad_ingresada;\n        renderCartProducts();\n    }\n    //Calcular total\n    calculateTotalPrice();\n}\n")])])]),a("h3",{attrs:{id:"quitar-producto-del-carrito"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quitar-producto-del-carrito"}},[e._v("#")]),e._v(" Quitar producto del carrito")]),e._v(" "),a("p",[e._v("Esta función se ejecutará al dar click en el botón eliminar de un producto del carrito, haciendo que ese producto se quite del array de cartProducts y que al renderizarse denuevo los productos del carrito ya no aparezca dicho producto.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Quitar producto de array cartProducts*/\nfunction quitarCartProduct(indexProduct) {\n    console.log('borrat'+indexProduct)\n    cartProducts.splice(indexProduct,1);\n    renderCartProducts();\n    //Calcular total\n    calculateTotalPrice();\n}\n")])])]),a("h3",{attrs:{id:"calcular-precio-total-a-pagar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#calcular-precio-total-a-pagar"}},[e._v("#")]),e._v(" Calcular precio total a pagar")]),e._v(" "),a("p",[e._v("Esta función se ejecuta cuando se añade un nuevo producto al carrito, cuando se quita y cuando se modifica la cantidad de un producto.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/*Calcular el precio total*/\nfunction calculateTotalPrice() {\n    let totalPrice = 0;\n    for (let i = 0; i < cartProducts.length; i++) {\n        const product = cartProducts[i];\n        totalPrice += product.cantidad * product.price * (100 - product.discount) / 100;\n    }\n    //Setear valor a elemento html\n    let total = $('#total');\n    total.text(totalPrice.toFixed(2));\n}\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);