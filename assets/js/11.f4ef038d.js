(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{275:function(e,a,t){"use strict";t.r(a);var r=t(13),s=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"keep-alive-strategy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-strategy"}},[e._v("#")]),e._v(" Keep Alive Strategy")]),e._v(" "),a("h2",{attrs:{id:"uso-de-scheduler-de-spring-boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uso-de-scheduler-de-spring-boot"}},[e._v("#")]),e._v(" Uso de Scheduler de Spring boot")]),e._v(" "),a("p",[e._v("Para poder mantener la conexión a la base de datos y no perderla por inactivadad se hizo uso de Scheduled\ncon lo cual se hizo una tarea programada que obtenga datos de la base de datos cada 4.25 segundos, se hizo uso del serivicio CategoryService ya que la cantidad de registros de categorias es mínimo y la cantidad de campos también, de tal forma que la obtención de datos se más ligera y no afecte al rendimiento.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  @Component\n  public class RequestScheduler {\n      /*Inyectar dependencia del service de categorias*/\n      @Autowired\n      private CategoryService categoryService;\n\n      /*Tarea programada para ejecutar una peticion a la base de datos cada 4250 milisegundos*/\n      @Async\n      @Scheduled(fixedRate = 4250)\n      public List<Category> requestDBCategory() {\n          //Devolver todas las categorias\n          return categoryService.findAll();\n      }\n  }\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);